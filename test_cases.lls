(define x 5)
(define x "abc")
//(define x NIL)
//(* x x)
(define x 5.5)
(* x x)
(neq x x)
//(cons 1 [1 "a" 3])
(cons 1 [1 2 3])
(and 1 0)
//(or 1 "abc")
(display [1 2 3])
(car ["a" "b"])
(cdr ["a" "b"])
(not 1)
//(define x (lambda (x) (x)))
(define x (lambda (a:int):int (x 5))) //what should this return? currently LLfun([LLint], LLint)
(define x:string "abc")
(let (z 3) (+ z z))
(let (z:int 3) (+ z z))
(if 1 "a" "b")
//(if 1 1.1 "b")
(while 1 (5 "a" 3 x))
(begin (5 "a" 3 x))
(setq x "a")
(define x:[int] [])
(define x:[float] [1.1 2.2])
(vsetq x 0 2.1)
(vmake 1 2)
(vget x 0) 
